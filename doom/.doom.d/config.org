#+TITLE: Doom config

* Basic stuff
** Set name and identity
#+begin_src emacs-lisp :tangle yes
;; Some functionality uses this to identify you, e.g. GPG configuration, email
;; clients, file templates and snippets.
(setq user-full-name "Scott D. Will"
      user-mail-address "scott.d.will@nasa.gov")
#+end_src

** Set Doom font
#+begin_src emacs-lisp :tangle yes
;; Doom exposes five (optional) variables for controlling fonts in Doom. Here
;; are the three important ones:
;;
;; + `doom-font'
;; + `doom-variable-pitch-font'
;; + `doom-big-font' -- used for `doom-big-font-mode'; use this for
;;   presentations or streaming.
;;
;; They all accept either a font-spec, font string ("Input Mono-12"), or xlfd
;; font string. You generally only need these two:
;; (setq doom-font (font-spec :family "Iosevka" :size 14))
(setq doom-font (font-spec :family "JetBrains Mono" :size 14))
;; (setq doom-variable-pitch-font (font-spec :family "JetBrains Mono" :size 14 :weight 'bold))
      ;; doom-variable-pitch-font (font-spec :family "sans" :size 13))
#+end_src

#+RESULTS:
: #<font-spec nil nil JetBrains\ Mono nil nil nil nil nil 14 nil nil nil nil>

** Set font height for headers
#+begin_src emacs-lisp :tangle yes
(after! org
  (set-face-attribute 'org-level-1 nil :height 1.125)
  (set-face-attribute 'org-level-2 nil :height 1.0675))
#+end_src

#+RESULTS:

** Set Doom theme
#+begin_src emacs-lisp :tangle yes
;; There are two ways to load a theme. Both assume the theme is installed and
;; available. You can either set `doom-theme' or manually load a theme with the
;; `load-theme' function. This is the default:
(setq doom-theme 'doom-solarized-light)
#+end_src

** Disable autocompletion of dictionary words from company-ispell
- Implementation 1: see [[https://www.reddit.com/r/emacs/comments/p2iwbv/turn_off_companyispell/][here]]
#+begin_src emacs-lisp :tangle yes
;; (defun prog-mode-hook-setup ()
;;   (run-with-idle-timer
;;    1
;;    nil
;;    (lambda ()
;;      (when (memq 'company-ispell company-backends)
;;        (setq company-backends (delete 'company-ispell company-backends))))))
;; (add-hook 'prog-mode-hook 'prog-mode-hook-setup)
#+end_src

- Implementation 2: see [[https://zzamboni.org/post/my-doom-emacs-configuration-with-commentary/][here]]
#+begin_src emacs-lisp :tangle yes
(defun zz/adjust-org-company-backends ()
  (remove-hook 'after-change-major-mode-hook '+company-init-backends-h)
  (setq-local company-backends nil))
(add-hook! org-mode (zz/adjust-org-company-backends))
#+end_src
** Start in maximized window
- [[https://emacs.stackexchange.com/a/3017/23435][Source]]
#+begin_src emacs-lisp :tangle yes
(add-to-list 'initial-frame-alist '(fullscreen . maximized))
#+end_src

** Relative line numbers
#+begin_src emacs-lisp :tangle yes
;; This determines the style of line numbers in effect. If set to `nil', line
;; numbers are disabled. For relative line numbers, set this to `relative'.
(global-display-line-numbers-mode)
(setq display-line-numbers-type t)
#+end_src


** Key remapping
- [2023-02-08 Wed 10:28] There is a weird combination of behaviors involving Emacs, MacOS with modifier keys remapped at the system level, and external keyboards. See https://github.com/doomemacs/doomemacs/issues/3952.
#+begin_src emacs-lisp :tangle yes
(setq mac-command-modifier      'super
      ns-command-modifier       'super
      mac-option-modifier       'meta
      ns-option-modifier        'meta
      mac-right-option-modifier 'none
      ns-right-option-modifier  'meta  ;; Default value was 'none
      )
#+end_src

#+RESULTS:
: meta

* Org-mode
** Base directory
#+begin_src emacs-lisp :tangle yes
;; If you use `org' and don't want your org files in the default location below,
;; change `org-directory'. It must be set before org loads!
(setq org-directory "~/Documents/notes")
#+end_src

** Basic setup
*** Log DONE tasks in logbook
#+begin_src emacs-lisp :tangle yes
(after! org
  (setq org-log-done 'time)
  (setq org-log-into-drawer t))
#+end_src

*** Always show durations in HH:MM format
#+begin_src emacs-lisp :tangle yes
(after! org
  (setq org-duration-format 'h:mm))
#+end_src

*** Map keybinding to insert inactive timestamp at current date/time
#+begin_src emacs-lisp :tangle yes
(after! org
  (map! :leader
        (:prefix ("md")
         (:desc "Insert current date+time" "i" (cmd! (org-time-stamp '(16) t))))))
#+end_src

*** Set headings for log notes
#+begin_src emacs-lisp :tangle yes
(after!     org
  (setq org-log-note-headings
        '((done . "%t Closing note")
          (state . "%t %S -> %s")
          (note . "%t")
          (reschedule . "%t Rescheduled from %s")
          (delschedule . "%t Removed scheduled time %s")
          (redeadline . "%t New deadline from %s")
          (deldeadline . "%t Removed deadline %s")
          (refile . "%t refiled")
          (clock-out . ""))))
#+end_src

*** Set up TODO keywords
#+begin_src emacs-lisp :tangle yes
(after! org
  (setq org-todo-keywords
        '((sequence "TODO(t)" "NEXT(n)" "WIP(w!)" "AWAIT(a@)" "BLOCKED(b@)" "IDEA(i)" "MAYBE" "|" "DONE(d@)" "NOTDOING(c@)")
          (sequence "MEETING(m)" "|" "ENDED(e)" "CANCELED(c@)" "SKIPPED(s@)")
          (sequence "[ ](T)" "[-](S)" "[?](W)" "|" "[x](D)")))
  )
#+end_src

*** Hide markup
#+begin_src emacs-lisp :tangle no
(after! org (setq org-hide-emphasis-markers t))
#+end_src

*** Always start in folded view
#+begin_src emacs-lisp :tangle yes
(after! org
  (setq org-startup-folded t))
#+end_src

*** Set fold properties so that consult/search can properly expand headlines
- [2022-08-15 Mon 11:27] See https://github.com/minad/consult/issues/563

#+begin_src emacs-lisp :tangle yes
(setq org-fold-core-style 'text-properties)
#+end_src

*** Fold drawers
- [2022-12-01 Thu 11:18] See [[https://www.reddit.com/r/emacs/comments/vaiogt/comment/ic2wfen/][reddit thread]]. After an update sometime this year, the TAB fold functionality started expanding drawers, which I don't want it to do.
#+begin_src emacs-lisp :tangle no
(setq org-cycle-hook
      '(org-hide-drawer-all org-cycle-hide-archived-subtrees org-cycle-show-empty-lines org-cycle-optimize-window-after-visibility-change))
#+end_src

#+RESULTS:
| org-hide-drawer-all | org-cycle-hide-archived-subtrees | org-cycle-show-empty-lines | org-cycle-optimize-window-after-visibility-change |

** Agenda
*** Agenda files
#+begin_src emacs-lisp :tangle yes
(setq org-agenda-files-2022
        '("~/Documents/notes/journal/2022/todo.org"
          "~/Documents/notes/projects/irad_fy22.org"
          "~/Documents/notes/projects/apra_fy23.org"
          "~/Documents/notes/projects/ldfc.org"
          "~/Documents/notes/inbox.org"
      ))

(setq org-agenda-files-2023
      '("~/Documents/notes/journal/2023/general.org"
        "~/Documents/notes/journal/2023/rst.org"
        "~/Documents/notes/journal/2023/habworlds.org"
        "~/Documents/notes/projects/apra_fy23.org"
        "~/Documents/notes/projects/ldfc.org"
        "~/Documents/notes/inbox.org"
        "~/Documents/notes/ideas.org"
        ))

;; (after! org (setq org-agenda-files (append org-agenda-files-2023 org-agenda-files-2022)))
(after! org (setq org-agenda-files org-agenda-files-2023))
#+end_src

*** =org-super-agenda=
- Set up custom agenda views
#+begin_src emacs-lisp :tangle yes
(use-package! org-super-agenda
  :after org-agenda
  :init
  (setq org-agenda-skip-scheduled-if-done t
        org-agenda-skip-deadline-if-done t
        org-agenda-include-deadlines t
        org-agenda-block-separator nil
        org-agenda-compact-blocks t
        org-agenda-start-day nil ;; i.e. today
        org-agenda-span 1
        org-agenda-start-on-weekday nil
        org-agenda-start-with-log-mode t)
  (setq org-agenda-custom-commands
        '(("z" "Super agenda"
           ((agenda "" ((org-agenda-span 'day)
                        (org-super-agenda-groups
                         '(
                           (:name "Today"
                            :time-grid nil
                            ;; :date today
                            ;; :scheduled today
                            :order 1)
                           (:name "Inbox"
                            :time-grid nil
                            :file-path "inbox.org"
                            :order 2)
                            (:name "APRA"
                             :file-path "apra_fy23.org"
                             :order 2)
                            (:name "RST"
                             :tag "rst"
                             :order 3)
                            (:name "General"
                             :tag ("general")
                             :order 4)
                           ))))))
          ("t" "Super tasks"
            ((alltodo "" ((org-agenda-overriding-header "")
                         (org-super-agenda-groups
                          '((:name "Meetings"
                             :and (:todo "MEETING" :scheduled today)
                             :discard (:todo "MEETING" :scheduled future)
                             :order 10)
                            (:name "IRAD"
                             :tag "irad"
                             :order 2)
                            (:name "RST"
                             :tag "rst"
                             :order 3)
                            (:name "General"
                             :tag ("general" "admin")
                             :order 1)
                            (:name "Personal"
                             :tag "personal"
                             :order 6)
                            (:name "Study"
                             :tag "study"
                             :order 97)
                            (:name "Waiting"
                             :todo "AWAIT"
                             :order 98)
                            (:name "Blocked"
                             :todo "BLOCKED"
                             :order 99)
                            (:name "Upcoming deadlines"
                             :deadline future
                             :order 99)
                             ))))))
          ("w" "Weekly review"
           agenda ""
           ((org-agenda-start-day "-7d")
            (org-agenda-span 7)
            (org-agenda-start-on-weekday 1)
            (org-agenda-start-with-log-mode t)
            ))
          ))
  :config
  (org-super-agenda-mode))
#+end_src

- Stop org-super-agenda from clobbering evil mode keybinds, see [[https://github.com/alphapapa/org-super-agenda/issues/50][here]]
#+begin_src emacs-lisp :tangle yes
(setq org-super-agenda-header-map (make-sparse-keymap))
  #+end_src

*** Set custom keybinding for org-super-agenda that skips org-agenda dispatcher
#+begin_src emacs-lisp :tangle yes
(after! org-agenda
  (map! :leader (:desc "org-super-agenda" "z" (cmd! (org-agenda nil "z")))))
#+end_src

#+RESULTS:
| lambda | (&rest _) | (interactive) | (org-agenda nil z) |

*** Get agenda as dynamic block
- [[https://emacs.stackexchange.com/questions/58925/capture-org-agenda-and-show-some-entry-text-into-dynamic-block][Reference]]

  #+begin_src emacs-lisp :tangle yes
(defun org-dblock-write:sjm/org-insert-agenda (params)
  "Writes agenda items with some some text from the entry as context
to dynamic block.
Parameters are:

:key

  If key is a string of length 1, it is used as a key in
  `org-agenda-custom-commands` and triggers that command.  If it
  is a longer string it is used as a tags/todo match string.

:leaders

  String to insert before context text.  Defaults to two spaces \"  \".
  Do not use asterisk \"* \".

:count

  Maximum number of lines to include, defaults to
  org-agenda-entry-text-maxlines

:replace-what

  Regex to replace.  Defaults to heading asterisk characters and
  first uppercase word (TODO label): \"^\\* [A-Z-]* \"

:replace-with

  String to replace the org-heading star with.
  Defaults to \"- \" such that headings become list items.

Somewhat adapted from org-batch-agenda.
"
  (let ((data)
    (cmd-key (or (plist-get params :key) "b"))
    (org-agenda-entry-text-leaders (or (plist-get params :leaders) "  "))
    (org-agenda-entry-text-maxlines (or (plist-get params :count)
                        org-agenda-entry-text-maxlines))
    (replace-this (or (plist-get params :repalce-this) "^\\* [A-Z-]* "))
    (replace-with (or (plist-get params :replace-with) "- "))
    (org-agenda-sticky))
    (save-window-excursion ; Return to current  buffer and window when done.
      (if (> (length cmd-key) 1) ; If key is more than one character, THEN
      (org-tags-view nil cmd-key) ; Invoke tags view, ELSE
    (org-agenda nil cmd-key)) ; Invoke agenda view using key provided.
    (setq data (buffer-string)) ; copy agenda buffer contents to data
    (with-temp-buffer ; Using a temporary buffer to manipulate text.
      (insert data) ; place agenda data into buffer.
      (goto-char (point-max)) ; end-of-buffer
      (beginning-of-line 1)   ; beggining of last line.
      (while (not (bobp)) ; while not begging of buffer
        (when (org-get-at-bol 'org-hd-marker) ; get text property.
          (sjm/org-agenda-entry-text)) ; Insert item context underneath.
        (beginning-of-line 0)) ; Go to previous line
      (setq data (buffer-string)))) ; Copy buffer, close tmp buf & excursion.
    ;; Paste data, replacing asterisk as per replace-this with replace-with.
    (insert (replace-regexp-in-string replace-this replace-with data))))

                    ;
(defun sjm/org-agenda-entry-text ()
  "Insert some text from the current agenda item as context.
Adapted from `org-agenda-entry-text-show-here', relies upon
`org-agenda-get-some-entry-text' for the bulk of the work."
  (save-excursion ; return to current place in buffer.
    (let (m txt o) ; declare some local variables.
    (setq m (org-get-at-bol 'org-hd-marker)) ; get text property
    (unless (marker-buffer m) ; get buffer that marker points into.
      (error "No marker points to an entry here"))
    ;; get some entry text, remove any properties and append a new-line.
    (setq txt (concat "\n" (org-no-properties
                (org-agenda-get-some-entry-text
                 m org-agenda-entry-text-maxlines
                 org-agenda-entry-text-leaders))))
    (when (string-match "\\S-" txt)
      (forward-line 1)
      (insert txt "\n\n")))))
#+end_src
*** Color agenda blocks and make height proportional to duration
See [[https://orgmode.org/worg/org-hacks.html][org hacks]]
#+begin_src emacs-lisp :tangle yes
(defun org-agenda-log-mode-colorize-block ()
  "Set different line spacing based on clock time duration."
  (save-excursion
    (let* ((colors (cl-case (alist-get 'background-mode (frame-parameters))
                                 ('light
                                  (list "#F6B1C3" "#FFFF9D" "#BEEB9F" "#ADD5F7"))
                                 ('dark
                                  (list "#aa557f" "DarkGreen" "DarkSlateGray" "DarkSlateBlue"))))
           pos
           duration)
      (nconc colors colors)
      (goto-char (point-min))
      (while (setq pos (next-single-property-change (point) 'duration))
        (goto-char pos)
        (when (and (not (equal pos (point-at-eol)))
                   (setq duration (org-get-at-bol 'duration)))
          ;; larger duration bar height
          (let ((line-height ( / duration 30))
                (ov (make-overlay (point-at-bol) (1+ (point-at-eol)))))
            (overlay-put ov 'face `(:background ,(car colors) :foreground "black"))
            (setq colors (cdr colors))
            (overlay-put ov 'line-height line-height)
            (overlay-put ov 'line-spacing (1- line-height))))))))

(add-hook 'org-agenda-finalize-hook #'org-agenda-log-mode-colorize-block)
#+end_src

** Capture
*** Capture location
#+begin_src emacs-lisp :tangle yes
(after! org
  (setq +org-capture-todo-file "~/Documents/notes/inbox.org"))
#+end_src

*** Capture templates
#+begin_src emacs-lisp :tangle yes
(after! org
  (setq org-capture-templates
        '(
          ("t" "Todo" entry (file +org-capture-todo-file)
           "* TODO %?\n%U" :empty-lines 1)
          ("T" "Todo (interrupt)" entry (file +org-capture-todo-file)
           "* TODO %?\n%U" :empty-lines 1 :clock-in t :clock-keep t :jump-to-captured t)
          ("m" "Meeting" entry (file +org-capture-todo-file)
           "* MEETING %?\n%U" :empty-lines 1)
          ("M" "Meeting (interrupt)" entry (file +org-capture-todo-file)
           "* MEETING %?\n%U" :empty-lines 1 :clock-in t :clock-keep t :jump-to-captured t)
          ("p" "Personal" entry (file+headline "~/gdrive/notes/personal.org" "Inbox")
           "* TODO %?\n%U" :empty-lines 1)
          )))
;; (setq org-capture-templates
;;       '(("t" "Personal todo" entry (file+headline +org-capture-todo-file "Inbox")
;;          "* TODO %?\n %i\n %a" :prepend t)
;;         ("n" "Personal notes" entry (file+headline +org-capture-notes-file "Inbox") "* %u %? %i %a" :prepend t)
;;         ("j" "Journal" entry (file+olp+datetree +org-capture-journal-file) "* %U %? %i %a" :prepend t)
;;         ("p" "Templates for projects") ("pt" "Project-local todo" entry (file+headline +org-capture-project-todo-file "Inbox") "* TODO %? %i %a" :prepend t)
;;         ("pn" "Project-local notes" entry (file+headline +org-capture-project-notes-file "Inbox") "* %U %? %i %a" :prepend t)
;;         ("pc" "Project-local changelog" entry (file+headline +org-capture-project-changelog-file "Unreleased") "* %U %? %i %a" :prepend t)
;;         ("o" "Centralized templates for projects") ("ot" "Project todo" entry #'+org-capture-central-project-todo-file "* TODO %? %i %a" :heading "Tasks" :prepend nil)
;;         ("on" "Project notes" entry #'+org-capture-central-project-notes-file "* %U %? %i %a" :heading "Notes" :prepend t)
;;         ("oc" "Project changelog" entry #'+org-capture-central-project-changelog-file "* %U %? %i %a" :heading "Changelog" :prepend t)))
#+end_src
** Clocking
*** Allow clocks to persist through an Emacs restart ([[https://zzamboni.org/post/my-doom-emacs-configuration-with-commentary/][source]])
#+begin_src emacs-lisp :tangle yes
(after! org-clock
  (setq org-clock-persist t)
  (org-clock-persistence-insinuate))
#+end_src

*** Create clock table grouped by tag (*not currently working*) ([[https://gist.github.com/ironchicken/6b5424bc2024b3d0a58a8a130f73c2ee][source]])
#+begin_src emacs-lisp :tangle yes
(defun clocktable-by-tag/shift-cell (n)
  (let ((str ""))
    (dotimes (i n)
      (setq str (concat str "| ")))
    str))

(defun clocktable-by-tag/insert-tag (params)
  (let ((tag (plist-get params :tags)))
    (insert "|--\n")
    (insert (format "| %s | *Tag time* |\n" tag))
    (let ((total 0))
      (mapcar
       (lambda (file)
         (let ((clock-data (with-current-buffer (find-file-noselect file)
                             (org-clock-get-table-data (buffer-name) params))))
           (when (> (nth 1 clock-data) 0)
             (setq total (+ total (nth 1 clock-data)))
             (insert (format "| | File *%s* | %.2f |\n"
                             (file-name-nondirectory file)
                             (/ (nth 1 clock-data) 60.0)))
             (dolist (entry (nth 2 clock-data))
               (insert (format "| | . %s%s | %s %.2f |\n"
                               (org-clocktable-indent-string (nth 0 entry))
                               (nth 1 entry)
                               (clocktable-by-tag/shift-cell (nth 0 entry))
                               (/ (nth 4 entry) 60.0)))))))
       (org-agenda-files))
      (save-excursion
        (re-search-backward "*Tag time*")
        (org-table-next-field)
        (org-table-blank-field)
        (insert (format "*%.2f*" (/ total 60.0)))))
    (org-table-align)))

(defun org-dblock-write:clocktable-by-tag (params)
  (insert "| Tag | Headline | Time (h) |\n")
  (insert "|     |          | <r>  |\n")
  (let ((tags (plist-get params :tags)))
    (mapcar (lambda (tag)
              (clocktable-by-tag/insert-tag (plist-put (plist-put params :match tag) :tags tag)))
            tags)))
#+end_src
*** Jump to clock + narrow to subtree
https://lists.gnu.org/archive/html/emacs-orgmode/2010-04/msg00343.html

#+begin_src emacs-lisp :tangle yes
(after! org
  (defun my-clock-goto-narrow ()
    (interactive)
    (when (org-clock-is-active)
      (org-clock-goto)
      (org-narrow-to-subtree)))
  (map! :leader (:prefix ("mc") (:desc "Go to current clock" "g" (cmd! (my-clock-goto-narrow)))))
  )
#+end_src

** File handling
*** Open docx files with Word
- See [[https://www.reddit.com/r/emacs/comments/96mdyj/creating_a_hyperlink_that_leads_to_a_word_document/][here]]
- Replace ~open~ with ~xdg-open~ on Linux
#+begin_src emacs-lisp :tangle yes
(after! org
  (push '("\\.docx?\\'" . "open %s") org-file-apps)
  (push '("\\.pptx?\\'" . "open %s") org-file-apps)
  (push '("\\.xlsx?\\'" . "open %s") org-file-apps)
  )
#+end_src
** HTML export
- From [[https://gitlab.com/OlMon/org-themes/-/blob/master/src/simple_inline/simple_inline.theme]]

#+begin_src emacs-lisp :tangle yes
(after! org
  (setq org-html-head (concat
                           "<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n"
                           "<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n"
                           "<style type=\"text/css\">\n"
                           "html,button,input,select,textarea {  color: #484C66;}html {  font-size: 90%;  line-height: 1.4;}*,*:before,*:after {  -moz-box-sizing: border-box;  -webkit-box-sizing: border-box;  box-sizing: border-box;}a {  white-space: pre;  white-space: pre-wrap;  white-space: pre-line;  white-space: -pre-wrap;  white-space: -o-pre-wrap;  white-space: -moz-pre-wrap;  white-space: -hp-pre-wrap;  word-wrap: break-word;  text-decoration: none;}a:hover {  color: #0A4C89;}/* * Remove text-shadow in selection highlight: h5bp.com/i * These selection rule sets have to be separate. * Customize the background color to match your design. */::-moz-selection {  background: #0A4C89;  color: #FFF;  text-shadow: none;}::selection {  background: #0A4C89;  color: #FFF;  text-shadow: none;}/* * A better looking default horizontal rule */hr {  display: block;  height: 1px;  border: 0;  border-top: 1px dashed #CCC;  margin: 1em 0;  padding: 0;}/* * Remove the gap between images, videos, audio and canvas and the bottom of * their containers: h5bp.com/i/440 */audio,canvas,img,video {  vertical-align: middle;}/* * Remove default fieldset styles. */fieldset {  border: 0;  margin: 0;  padding: 0;}/* * Allow only vertical resizing of textareas. */textarea {  resize: vertical;}/* ==========================================================================   Author's custom styles   ========================================================================== */.todo,.done,.tag {  font-family: \"Source Pro\", Monaco, \"Courier New\", monospace;  padding: 0 0.3em;  background-color: #EEE;  border: 1px solid #CCC;}.todo {  color: #DD4433;}.done {  color: #44934B;}.tag {  font-size: 80%;  font-weight: normal;  margin: 0 0.3em;  display: none;}.timestamp {  color: #BEBEBE;}.timestamp-kwd {  color: #5F9EA0;}.right {  margin-left: auto;  margin-right: 0px;  text-align: right;}.left {  margin-left: 0px;  margin-right: auto;  text-align: left;}.center {  margin-left: auto;  margin-right: auto;  text-align: center;}.underline {  text-decoration: underline;}#postamble p,#preamble p {  font-size: 90%;  margin: .2em;}pre,code {  font-family: \"Source Pro\", Monaco, \"Courier New\", monospace;  padding-left: 0.3em;  padding-right: 0.3em;}pre {  font-size: 90%;  padding: 8pt;  overflow: auto;  white-space: pre;  word-wrap: normal;}pre.src {  position: relative;}pre.src:before {  display: none;  position: absolute;  background-color: #FFF;  top: 0.5em;  right: 0.5em;  padding: 4px;  border: 1px solid #CCC;}pre.src-sh:before {  content: \"Shell Script\";}pre.src-bash:before {  content: \"Bash Script\";}pre.src-emacs-lisp:before {  content: \"Emacs Lisp\";}pre.src-R:before {  content: \"R\";}pre.src-perl:before {  content: \"Perl\";}pre.src-java:before {  content: \"Java\";}pre.src-sql:before {  content: \"SQL\";}pre.src-c:before {  content: \"C\";}pre.src-cpp:before {  content: \"C++\";}pre.src-html:before {  content: \"HTML\";}table {  border-collapse: collapse;  display: block;  overflow-x: auto;}caption.t-above {  caption-side: top;}caption.t-bottom {  caption-side: bottom;}td, th {  vertical-align: top;  border: 1px solid #CCC;  padding: 0.5em;}th.right {  text-align: center;}th.left {  text-align: center;}th.center {  text-align: center;}td.right {  text-align: right;}td.left {  text-align: left;}td.center {  text-align: center;}dt {  font-weight: bold;}#footnotes {  border-top: 5px solid #0A4C89;  margin-bottom: 5em;}#footnotes h2 {  display: none;}#text-footnotes {  margin-top: 1em;}.footpara:nth-child(2) {  display: inline;}.footpara {  display: block;}.footdef sup:before {  content: \"[\";}.footdef sup:after {  content: \"]\";}.footdef p {  display: inline;}figure {  margin: 0;}figure img {  max-width: 100%;}figcaption {  text-align: center;  font-size: 0.8rem;}.inlinetask {  padding: 10px;  border: 2px solid gray;  margin: 10px;  background: #ffffcc;}#org-div-home-and-up {  text-align: right;  font-size: 70%;  white-space: nowrap;}textarea {  overflow-x: auto;}.linenr {  font-size: smaller;}.code-highlighted {  background-color: #ffff00;}.org-info-js_info-navigation {  border-style: none;}#org-info-js_console-label {  font-size: 10px;  font-weight: bold;  white-space: nowrap;}.org-info-js_search-highlight {  background-color: #ffff00;  color: #000000;  font-weight: bold;}p.verse,blockquote {  margin: 0;  padding: 0;  padding-left: 3%;  border-left: 5px solid #0A4C89;}body {  font-family: Lora, Palatino, Georgia, serif;  width: 92%;  max-width: 1024px;  margin: 0 auto;  background-color: #FFF;}h2 {  line-height: 1.62em;}.title {  margin: 0 0 2em 0;  line-height: 2em;  border-bottom: 5px solid #0A4C89;  text-align: center;}#postamble {  font-size: 80%;  line-height: 1.4em;  text-align: right;}h1, h2, h3, h4, h5, h6 {  font-family: \"Source Sans Pro\", sans-serif;  color: #222;}.outline-2 {  margin-bottom: 4em;}.outline-2 h2 {  border-bottom: 1px solid #CCC;}.outline-text-2 code, pre {  background-color: #EEE;}#table-of-contents {  display: none;  margin-left: 0.5em;}#text-table-of-contents ul {  padding-left: 1.8em;}#text-table-of-contents li {  list-style-type: circle;  margin: 0.4em 0;}#text-table-of-contents ul ul {  margin: 0;}#text-table-of-contents li li {  font-weight: normal;  font-size: 90%;  margin: 0;}#content {  overflow: hidden;  *zoom: 1;}/* ==========================================================================   EXAMPLE Media Queries for Responsive Design.   These examples override the primary ('mobile first') styles.   Modify as content requires.   ========================================================================== */@media only screen and (min-width: 35em) {  /* Style adjustments for viewports that meet the condition */}@media print, (-o-min-device-pixel-ratio: 5 / 4), (-webkit-min-device-pixel-ratio: 1.25), (min-resolution: 120dpi) {  /* Style adjustments for high resolution devices */}/* ==========================================================================   Print styles.   Inlined to avoid required HTTP connection: h5bp.com/r   ========================================================================== */@media print {  * {    background: transparent !important;    color: #000 !important;    /* Black prints faster: h5bp.com/s */    box-shadow: none !important;    text-shadow: none !important;  }  a,  a:visited {    text-decoration: underline;  }  a[href]:after {    content: \" (\" attr(href) \")\";  }  abbr[title]:after {    content: \" (\" attr(title) \")\";  }  /*   * Don't show links for images, or javascript/internal links   */  .ir a:after,  a[href^=\"javascript:\"]:after,  a[href^=\"#\"]:after {    content: \"\";  }  pre,  blockquote {    /* border: 1px solid #999; */    page-break-inside: avoid;  }  thead {    display: table-header-group;    /* h5bp.com/t */  }  tr,  img {    page-break-inside: avoid;  }  img {    max-width: 100% !important;  }  @page {    margin: 0.5cm;  }  p,  h2,  h3 {    orphans: 3;    widows: 3;  }  h2,  h3 {    page-break-after: avoid;  }  #table-of-contents {    display: block;    width: initial;    border: none;  }  #table-of-contents a {    text-decoration: none;  }}/* large screen */@media screen and (min-width: 40rem) {  html {    font-size: 100%;  }  #table-of-contents {    display: block;    padding: 1em;    width: 32%;    min-width: 18em;    float: right;    background-color: #EEE;    position: relative;    /* required by z-index */    z-index: 5000;    border: 1px solid #CCC;  }  .tag {    display: initial;  }}\n"
                           "</style>\n")))
#+end_src

* LaTeX
** Don't raise/lower subscripts, see [[https://github.com/ymarco/doom-emacs-config/blob/master/latex-config.el][here]]
  #+begin_src emacs-lisp :tangle yes
(setq font-latex-fontify-script nil)
  #+end_src

* Evil-mode
** Save when leaving insert mode ([[https://emacs.stackexchange.com/questions/50925/saving-file-everytime-leaving-insert-mode-in-evil-mode][source]])
#+begin_src emacs-lisp :tangle yes
;; (add-hook 'evil-insert-state-exit-hook
;;           (lambda ()
;;             (call-interactively #'evil-write)))
#+end_src
** When splitting window, prompt for which buffer to open ([[https://tecosaur.github.io/emacs-config/config.html][source]])
  #+begin_src emacs-lisp :tangle yes
(after! evil
  (setq evil-vsplit-window-right t
        evil-split-window-below t)
  (defadvice! prompt-for-buffer (&rest _)
    :after '(evil-window-split evil-window-vsplit) (projectile-find-file)))
  #+end_src

** Map SPC-DEL to =:nohighlight=
  #+begin_src emacs-lisp :tangle yes
(after! evil
  (map! :leader "DEL" (cmd! (evil-ex-nohighlight))))
  #+end_src


** Navigate by visual line instead of physical line
Can't just set =evil-respect-visual-line-mode= because it has to be set prior to loading evil-mode. See [[https://archive.baty.net/2020/respecting-visual-lines-in-doom-emacs/][here]].
#+begin_src emacs-lisp :tangle yes
#+end_src
