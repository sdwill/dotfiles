#+TITLE: Doom config

* Basic stuff
** Name and identity
#+begin_src emacs-lisp :tangle yes
;; Some functionality uses this to identify you, e.g. GPG configuration, email
;; clients, file templates and snippets.
(setq user-full-name "Scott D. Will"
      user-mail-address "scott.d.will@nasa.gov")
#+end_src

** Font
#+begin_quote
Doom exposes five (optional) variables for controlling fonts in Doom. Here are the three important ones:

 + `doom-font'
 + `doom-variable-pitch-font'
 + `doom-big-font' -- used for `doom-big-font-mode'; use this for
   presentations or streaming.

They all accept either a font-spec, font string ("Input Mono-12"), or xlfd
font string. You generally only need these two:
#+end_quote

- Source: [[https://hugocisneros.com/org-config/]]
#+begin_src emacs-lisp :tangle no
;; (defun my/buffer-face-mode-variable ()
;;   "Set font to a variable width (proportional) fonts in current buffer"
;;   (interactive)
;;   (set-face-attribute 'variable-pitch nil
;;                       :family "Open Sans" :height 140)
;;   (set-face-attribute 'fixed-pitch nil
;;                       :family "Victor Mono" :height 140))
;; (add-hook 'org-mode-hook 'my/buffer-face-mode-variable)

(defun my/set-general-faces-org ()
  (my/buffer-face-mode-variable)
  (setq line-spacing 0.1)
  (variable-pitch-mode +1)
  (mapc
   (lambda (face) ;; Other fonts that require it are set to fixed-pitch.
     (set-face-attribute face nil :inherit 'fixed-pitch))
   (list 'org-block
         'org-table
         'org-verbatim
         'org-block-begin-line
         'org-block-end-line
         'org-meta-line
         'org-date
         'org-drawer
         'org-property-value
         'org-special-keyword
         'org-document-info-keyword))
  (mapc ;; This sets the fonts to a smaller size
   (lambda (face)
     (set-face-attribute face nil :height 1.0))
   (list 'org-document-info-keyword
         'org-block-begin-line
         'org-block-end-line
         'org-meta-line
         'org-drawer
         'org-property-value
         )))

(add-hook 'org-mode-hook 'my/set-general-faces-org)
#+end_src

#+RESULTS:

#+begin_src emacs-lisp :tangle yes
(setq doom-font (font-spec :family "Victor Mono" :size 16 :weight 'medium)
      doom-variable-pitch-font (font-spec :family "IBM Plex Sans" :size 14))
#+end_src

** Set Doom theme
#+begin_src emacs-lisp :tangle yes
;; There are two ways to load a theme. Both assume the theme is installed and
;; available. You can either set `doom-theme' or manually load a theme with the
;; `load-theme' function. This is the default:
;; (setq doom-theme 'doom-catppuccin)
;; (setq doom-catppuccin-dark-variant "latte")
;; (setq doom-theme 'doom-nord-light)
;; (load-theme 'catppuccin-latte)
(setq doom-theme 'doom-solarized-light)
#+end_src

** Disable autocompletion of dictionary words from company-ispell
- Implementation 1: see [[https://www.reddit.com/r/emacs/comments/p2iwbv/turn_off_companyispell/][here]]
#+begin_src emacs-lisp :tangle yes
;; (defun prog-mode-hook-setup ()
;;   (run-with-idle-timer
;;    1
;;    nil
;;    (lambda ()
;;      (when (memq 'company-ispell company-backends)
;;        (setq company-backends (delete 'company-ispell company-backends))))))
;; (add-hook 'prog-mode-hook 'prog-mode-hook-setup)
#+end_src

- Implementation 2: see [[https://zzamboni.org/post/my-doom-emacs-configuration-with-commentary/][here]]
#+begin_src emacs-lisp :tangle yes
(defun zz/adjust-org-company-backends ()
  (remove-hook 'after-change-major-mode-hook '+company-init-backends-h)
  (setq-local company-backends nil))
(add-hook! org-mode (zz/adjust-org-company-backends))
#+end_src
** Start in maximized window
- [[https://emacs.stackexchange.com/a/3017/23435][Source]]
#+begin_src emacs-lisp :tangle yes
(add-to-list 'initial-frame-alist '(fullscreen . maximized))
#+end_src

** Relative line numbers
#+begin_src emacs-lisp :tangle yes
;; This determines the style of line numbers in effect. If set to `nil', line
;; numbers are disabled. For relative line numbers, set this to `relative'.
(global-display-line-numbers-mode)
(setq display-line-numbers-type t)
#+end_src

* Org-mode
** Base directory
#+begin_src emacs-lisp :tangle yes
;; If you use `org' and don't want your org files in the default location below,
;; change `org-directory'. It must be set before org loads!
(setq org-directory "~/notes")
#+end_src

** Basic setup
*** Log DONE tasks in logbook
#+begin_src emacs-lisp :tangle yes
(after! org
  (setq org-log-done 'time)
  (setq org-log-into-drawer t))
#+end_src

*** Always show durations in HH:MM format
#+begin_src emacs-lisp :tangle yes
(after! org
  (setq org-duration-format 'h:mm))
#+end_src

*** Map keybinding to insert inactive timestamp at current date/time
#+begin_src emacs-lisp :tangle yes
(after! org
  (map! :leader
        (:prefix ("md")
         (:desc "Insert current date+time" "i" (cmd! (org-time-stamp '(16) t))))))
#+end_src

*** Set headings for log notes
#+begin_src emacs-lisp :tangle yes
(after! org
  (setq org-log-note-headings
        '((done . "%t Closing note")
          (state . "%t State %s from %S")
          (note . "%t")
          (refile . "%t Refiled")
          (clock-out . ""))))
#+end_src

*** Set up TODO keywords
#+begin_src emacs-lisp :tangle yes
(after! org
  (setq org-todo-keywords
        '((sequence "TODO(t)" "AWAIT(a)" "BLOCKED(b)" "IDEA(i)" "|" "DONE(d)" "CANCELED(c)")
          (sequence "MEETING(m)" "EVENT(v)" "|" "ENDED(e)" "CANCELED(c)" "SKIPPED(s)")
          (sequence "[ ](T)" "[-](S)" "[?](W)" "|" "[x](D)")))
  )
#+end_src

#+RESULTS:
| sequence | TODO(t)    | AWAIT(a) | BLOCKED(b) | IDEA(i) |          |             | DONE(d)    | CANCELED(c) |
| sequence | MEETING(m) | EVENT(v) |            |         | ENDED(e) | CANCELED(c) | SKIPPED(s) |             |
| sequence | [ ](T)     | [-](S)   | [?](W)     |         |          | [x](D)      |            |             |

*** Hide markup
#+begin_src emacs-lisp :tangle no
(after! org (setq org-hide-emphasis-markers t))
#+end_src

*** Always start in folded view
#+begin_src emacs-lisp :tangle yes
(after! org
  (setq org-startup-folded t))
#+end_src

** Capture
*** Capture location
#+begin_src emacs-lisp :tangle yes
(after! org
  (setq +org-capture-todo-file "~/Documents/notes/journal/2022/todo.org"))
#+end_src

*** Capture templates
#+begin_src emacs-lisp :tangle yes
(after! org
  (setq org-capture-templates
        '(
          ("t" "Todo" entry (file+headline +org-capture-todo-file "Inbox")
           "* TODO %?\n%U" :empty-lines 1)
          ("p" "Personal" entry (file+headline "~/gdrive/notes/personal.org" "Inbox")
           "* TODO %?\n%U" :empty-lines 1)
          ("b" "Book" entry (file+headline "~/notes/books.org" "Inbox")
           "* TODO %?\n%U" :empty-lines 1)
          )))
;; (setq org-capture-templates
;;       '(("t" "Personal todo" entry (file+headline +org-capture-todo-file "Inbox")
;;          "* TODO %?\n %i\n %a" :prepend t)
;;         ("n" "Personal notes" entry (file+headline +org-capture-notes-file "Inbox") "* %u %? %i %a" :prepend t)
;;         ("j" "Journal" entry (file+olp+datetree +org-capture-journal-file) "* %U %? %i %a" :prepend t)
;;         ("p" "Templates for projects") ("pt" "Project-local todo" entry (file+headline +org-capture-project-todo-file "Inbox") "* TODO %? %i %a" :prepend t)
;;         ("pn" "Project-local notes" entry (file+headline +org-capture-project-notes-file "Inbox") "* %U %? %i %a" :prepend t)
;;         ("pc" "Project-local changelog" entry (file+headline +org-capture-project-changelog-file "Unreleased") "* %U %? %i %a" :prepend t)
;;         ("o" "Centralized templates for projects") ("ot" "Project todo" entry #'+org-capture-central-project-todo-file "* TODO %? %i %a" :heading "Tasks" :prepend nil)
;;         ("on" "Project notes" entry #'+org-capture-central-project-notes-file "* %U %? %i %a" :heading "Notes" :prepend t)
;;         ("oc" "Project changelog" entry #'+org-capture-central-project-changelog-file "* %U %? %i %a" :heading "Changelog" :prepend t)))
#+end_src

#+RESULTS:
| t | Todo | entry | (file+headline +org-capture-todo-file Inbox) | * TODO %? |

** Clocking
*** Allow clocks to persist through an Emacs restart
[[https://zzamboni.org/post/my-doom-emacs-configuration-with-commentary/][Source]]
#+begin_src emacs-lisp :tangle yes
(after! org-clock
  (setq org-clock-persist t)
  (org-clock-persistence-insinuate))
#+end_src

** Refile notes to top of heading
#+begin_src emacs-lisp :tangle yes
(after! org
  (setq org-reverse-note-order t)
)
#+end_src
** Org-modern
#+begin_src emacs-lisp :tangle yes
(add-hook 'org-mode-hook #'org-modern-mode)
(add-hook 'org-agenda-finalize-hook #'org-modern-agenda)
(setq org-pretty-entities t)
#+end_src

#+RESULTS:
: t
** Mixed-pitch
#+begin_src emacs-lisp :tangle no
(use-package! mixed-pitch
  :hook
  (text-mode . mixed-pitch-mode))
#+end_src

** Images
*** Set default display width
#+begin_src emacs-lisp :tangle yes
(after! org (setq org-image-actual-width 300))
#+end_src

#+RESULTS:
: 300

#+begin_src elisp
(setq image-file-name-extensions '("png" "jpeg" "jpg" "gif" "tiff" "tif" "xbm" "xpm" "pbm" "pgm" "ppm" "pnm" "svg" "heic")
)
#+end_src

* LaTeX
** Don't raise/lower subscripts, see [[https://github.com/ymarco/doom-emacs-config/blob/master/latex-config.el][here]]
  #+begin_src emacs-lisp :tangle yes
(setq font-latex-fontify-script nil)
  #+end_src

* Evil-mode
** When splitting window, prompt for which buffer to open 
[[https://tecosaur.github.io/emacs-config/config.html][Source]]
  #+begin_src emacs-lisp :tangle yes
(after! evil
  (setq evil-vsplit-window-right t
        evil-split-window-below t)
  (defadvice! prompt-for-buffer (&rest _)
    :after '(evil-window-split evil-window-vsplit) (projectile-find-file)))
  #+end_src

** Map SPC-DEL to =:nohighlight=
  #+begin_src emacs-lisp :tangle yes
(after! evil
  (map! :leader "DEL" (cmd! (evil-ex-nohighlight))))
  #+end_src
